(require '[state-flow.core :as state-flow :refer [flow run run*]]
         '[state-flow.state :as state]
         '[matcher-combinators.core]
         '[state-flow.assertions.matcher-combinators :refer [match?]])

;; One way to express an integration test is a series of steps with
;; assertions mixed in. Ideally, all of the steps are pure functions,
;; meaning they don't access any external state. To support that, we
;; need to thread the state through the functions. One way we can do
;; this in Clojure is with the -> macro:

(-> {:count 0} ;; << state - we'll refer to it as s in the next steps
    ((fn [s] (update s :count inc)))
    ((fn [s] (assert (= 1 (:count s))) s)))

;; Each of those inline functions could be def'd ...

(defn inc-count [s] (update s :count inc))
(defn match [expected f] (fn [s] (assert (= expected (f s)))))

;; ... so we end up with a flow this:

(-> {:count 0}
    inc-count
    ((match 1 :count)))

;; That's a bit more expressive, but there's a lot more we'd like to
;; have in a testing framework.
;;
;; ----------------------------
;; state-flow
;; ----------------------------
;;
;; Enter state-flow: a framework for defining integration test flows
;; using (mostly) pure functions of state, which is managed for you by
;; a runner that threads the state through the functions and provides
;; many additional services along the way.
;;
;; There are a few concepts you'll need to grok in order to understand
;; how to use state-flow.
;;
;; ----------------------------
;; composite pattern
;; ----------------------------
;;
;; The composite pattern is an OO pattern in which a type exposes an
;; interface that you use to interact with a single instance or a collection
;; in the same way.
;;
;; ----------------------------
;; flows, steps, and the runner
;; ----------------------------
;;
;; A flow can be a single step or a collection of steps, each of which
;; can be a step or a flow. Whether it's a single step or a collection,
;; the interface is the same, so we talk about steps and flows somewhat
;; interchangeably. From the outside, a step is a flow, and a flow is
;; a step, and you can hand either to a runner.
;;
;; Here's an example of how we use state flow. Don't worry about the
;; details; we'll cover everything below.

(run                                          ;; << `run` takes a flow and an initial state
  (flow "increment count"                     ;; << a `flow` is a collection of steps
    (state-flow/swap-state update :count inc) ;; << step that updates state, incrementing :count
    (match? 1 (state-flow/get-state :count))  ;; << step that asserts the :count is 1
    (state-flow/get-state))                   ;; << step that returns the state
  {:count 0})                                 ;; << initial state
;; => [{:count 1} {:count 1}]                 ;; << result pair - we'll explain this later
;;
;; Note that we said "step that updates state". But we just said
;; that these functions should be pure! Well, actually the `state-flow/swap-state`
;; function itself just returns the result of applying `update`, in
;; this example, to whatever is passed to it, e.g.

(fn [s] (update s :count inc))

;; ... just like in the -> example above. As you'll see, it's the runner that
;; takes care of binding state to the function argument, and binding the
;; response back to the state context.
;;
;; ----------------------------
;; flows and steps: introduction the state monad
;; ----------------------------
;;
;; In state-flow, steps and flows are all instances of the same type:
;; the state monad.
;;
;; If you're already familiar with monads, great! If not, don't
;; worry. We'll explain just enough about the state monad to
;; understand state-flow.
;;
;; - A monad is a wrapper around a function.
;; - The wrapped function will be invoked by a monad runner later.
;;   - The monad runner binds arguments to the function.
;; - A state monad is a monad whose function is that of some mutable state.
;; - The return value of a state monad is a pair of [<left-value> <right-value>].
;;   - The <left-value> is the return of the function.
;;   - The <right-value> is always the state _after_ the function is
;;     invoked. Note: not all functions modify the state.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; state-flow/get-state
;;
;; `state-flow/get-state` is a primitive step whose <left-value> is the
;; result of applying a function (default `identity`) to the state.

;; First, let's just see what it evaluates to by itself.
(state-flow/get-state)
;; => {:mfn #function[...],
;;     :state-context #<State-E>}

(class *1)
;; => cats.monad.state.State
;;
;; - cats.monad.state.State is the class of the underlying object
;; - :mfn is the wrapped (monadic) function
;; - :state-context is a reference to mutable state, which the runner
;;   will bind to the function's argument.
;;
;; The :mfn of a state monad is a function of the state. When you invoke
;; :mfn with some state, it returns a pair of [<left-value> <right-value>],
;; where the <left-value> is what the function actually returns and
;; <right-value> is the state after the function is applied. So you can
;; think of [<left-value> <right-value>] to mean [<return-value> <state>].
;;
;; Since this is just a Clojure function, you can extract it from the
;; step (monad) and invoke it directly:

(let [f (:mfn (state-flow/get-state))]
  (f {:count 0}))
;; => [{:count 0} {:count 0}]
;;
;; The `{count 0}` on the left, the <left-value> or <return-value>, is
;; the state before invoking `state-flow/get-state`.  Since we passed `{count 0}`
;; to `f`, that is what `state-flow/get-state` returns.
;;
;; The `{count 0}` on the right, the <right-value> or <state>, is the
;; state _after_ invoking `state-flow/get-state`.  Since `state-flow/get-state` does not
;; modify the state, it's the same value we handed to `f`.
;;
;; state-flow provides a `run` function that binds the state to the
;; function argument for you:

(run (state-flow/get-state) {:count 0})
;; => [{:count 0} {:count 0}]
;;
;; The `run` function takes a step and an (optional - defaults to an
;; empty {}) initial state, and returns the return value from invoking
;; the :mfn with the state. Here's the same example with the default
;; initial-state:

(run (state-flow/get-state))
;; => [{} {}]

;; You can also use state-flow/get-state to apply a function to
;; the value of the state before returning it.

(run (state-flow/get-state update :count inc) {:count 0})
;;      return     state
;; => [{:count 1} {:count 0}]
;;
;; The `{count 1}` on the left, the <left-value> or <return-value>, is
;; the result of applying the function we passed to `state-flow/get-state` to
;; the state.  Since we passed `{count 0}` to `f`, that is passed to
;; `(fn [s] (update s :count + 1))`, which returns `{count 1}`.
;;
;; The `{count 0}` on the right, the <right-value> or <state>, is the
;; state _after_ invoking `state-flow/get-state`.  Since `state-flow/get-state` does not
;; modify the state, it's the same value we handed to `f`.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; state-flow/swap-state
;;
;; `state-flow/swap-state` does the reverse of `state-flow/get-state`: it returns the
;; unmodified state and applies a function to the state:

(run (state-flow/swap-state update :count inc) {:count 0})
;; => [{:count 0} {:count 1}]
;;
;; The `{count 0}` on the left, the <left-value> or <return-value>, is
;; the value of the state before `state-flow/swap-state`.
;;
;; The `{count 1}` on the right, the <right-value> or <state>, is the
;; the result of applying the function we passed to `state-flow/swap-state` to
;; the state.  Since we passed `{count 0}` to `f`, that is passed to
;; `(fn [s] (update s :count + 1))`, which leaves the state `{count 1}`.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; state-flow/return
;;
;; `state-flow/return` returns the value given to it, leaving state unchanged

(run (state-flow/return {:a 37}) {:b 42})
;; => [{:a 37} {:b 42}]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; state-flow/reset-state
;;
;; `state-flow/reset-state` replaces the state entirely, returning the state
;; as it was before the step.

(run (state-flow/reset-state {:name "Jacob"}) {:count 0})
;; => [{:count 0} {:name "Jacob"}]

;; ------------------------------------------------
;; flows
;; ------------------------------------------------
;;
;; We use flows to string together several steps in a single step:

(flow "counter"
  (state-flow/swap-state update :count inc)
  (state-flow/swap-state update :count inc)
  (state-flow/swap-state update :count inc))
;; => {:mfn #object[...],
;;     :state-context #<State-E>}
;;
;; And, then we can hand that directly to the run function, which
;; returns the result of the last step

(run (flow "counter"
       (state-flow/swap-state update :count inc)
       (state-flow/swap-state update :count inc)
       (state-flow/swap-state update :count inc))
  {:count 0})
;; => [{:count 2} {:count 3}]

(run (flow "counter"
       (state-flow/get-state update :count inc)
       (state-flow/get-state update :count inc)
       (state-flow/get-state update :count inc))
  {:count 0})
;; => [{:count 1} {:count 0}]

;; Since steps are values, we can def them
(def inc-count (state-flow/swap-state update :count inc))

(run inc-count {:count 0})
;; => [{:count 0} {:count 1}]

;; Same with flows
(def inc-twice (flow "increment twice"
                 inc-count
                 inc-count))

(run inc-twice {:count 0})
;; => [{:count 1} {:count 2}]

;; And we can nest flows arbitrarily deeply!
(run
  (flow "inc (parent)"
    inc-count
    (flow "inc twice (child)"
      inc-twice
      (flow "inc 2 more times (grandchild)"
        inc-twice))
    (state-flow/get-state update :count * 3))
  {:count 0})
;; => [{:count 15} {:count 5}]

;; ------------------------------------------------
;; bindings
;; ------------------------------------------------
;;
;; bindings let you bind the returns of steps to symbols,
;; which are then in scope for the remainder of the flow.

(run
  (flow "binding example"
    [count-before (state-flow/get-state :count)] ;; <- step produces [0 {:count 0}], binding binds 0 to `count-before`
    (state-flow/swap-state update :count inc)   ;; <- increments the value :count within the state
    [count-after (state-flow/get-state :count)]  ;; <- step produces [1 {:count 1}], binding binds 1 to `count-after`
    (state-flow/return {:before count-before
                   :after  count-after}))
  {:count 0})
;; => [{:before 0, :after 1} {:count 1}]

;; These look a lot like `let` bindings, but the symbol on the left
;; will be bound to the return of the monad on the right. You can also
;; bind _values_ using the `:let` keyword:

(run
  (flow "binding example"
    [:let [value-to-add-to-count 37]] ;; <- binds 37 to `value-to-add-to-count`
    ;; same as [value-to-add-to-count (state-flow/return 37)]
    (state-flow/swap-state update :count + value-to-add-to-count)
    (state-flow/get-state :count))
  {:count 0})
;; => [37 {:count 37}]

;; And those values can come from evaluating regular Clojure expressions:

(run
  (flow "binding example"
    [:let [value-to-add-to-count (+ 30 7)]]
    ;; same as [value-to-add-to-count (state-flow/return (+ 30 7))]
    (state-flow/swap-state update :count + value-to-add-to-count)
    (state-flow/get-state :count))
  {:count 0})
;; => [37 {:count 37}]

;; ------------------------------------------------
;; beyond primitives
;; ------------------------------------------------
;;
;; So far we've only dealt with functions that interact directly with
;; state. In practice, we want to execute functions that are specific
;; to our domain, that don't interact directly with the flow state
;; To run a normal clojure expression in a flow, you can wrap it
;; in a function and pass it to `wrap-fn`:

(run (state-flow/wrap-fn #(+ 1 2)) {})
;; => [3 {}]

(run
  (flow "get three"
    [result (state-flow/wrap-fn #(+ 1 2))]
    (state-flow/return result))
  {})
;; [3 {}]

;; Here's a more practical example, in which we draw from state
;; to provide arguments to domain functions.

;; domain fns

(defn new-db [] (atom {:users #{}}))
(defn register-user [db user] (swap! db update :users conj user))
(defn fetch-users [db] (:users @db))

;; helper fns

(defn with-db [f]
  (state-flow/fmap f (state-flow/get-state :db)))

(defn register-user-helper [user]
  (flow "register user"
    (with-db #(register-user % user))))

(defn fetch-users-helper []
  (flow "fetch users"
    (with-db fetch-users)))

;; flow

(run
  (flow "store and retrieve a user"
    (register-user-helper {:name "Phillip"})
    (fetch-users-helper))
  {:db (new-db)})
;; => [#{{:name "Phillip"}} {:db #<Atom@4d7999d2: {:users #{{:name "Phillip"}}}>}]
;;
;; ------------------------------------------------
;; assertions
;; ------------------------------------------------
;;
;; state-flow includes a wrapper around matcher-combinators to support
;; making assertions.
;;
;; See https://github.com/nubank/matcher-combinators

;; `match?` takes two args:
;;  - an expected value, or matcher
;;  - an actual value, or a step that will produce one
;;
;; example matching a value
(run
  (flow "store and retrieve a user"
    (register-user-helper {:name "Phillip"})
    [users (fetch-users-helper)]
    (flow "user got added"
      (match? #{{:name "Phillip"}} ;; << expected value
              users)))             ;; << actual value
  {:db (new-db)})

;; example matching the <left-value> produced by a step
(run
  (flow "store and retrieve a user"
    (register-user-helper {:name "Phillip"})
    (flow "user got added"
      (match? #{{:name "Phillip"}}    ;; << expected value
              (fetch-users-helper)))) ;; << step which produces value
  {:db (new-db)})

;; ------------------------------------------------
;; failure semantics
;; ------------------------------------------------

;; When an assertion fails, it prints the failure message to the
;; repl, e.g.

(run
  (flow "store and retrieve a user"
    (register-user-helper {:name "Phillip"})
    (flow "user got added"
      (match? #{{:name "Philip"}}  ;; <- different spelling
              (fetch-users-helper))))
  {:db (atom {:users #{}})})
;; => [#{{:name "Phillip"}} {:db #<Atom@4a65a50f: {:users #{{:name "Phillip"}}}>}]

;; --- printed to repl ---
;; FAIL in () (form-init13207122878088623810.clj:256)
;; interact with db (line 270) -> user got added (line 273) -> match? (line 274)
;; expected: (match? #{{:name "Philip"}} actual__12555__auto__)
;; actual: #{{:name (mismatch "Philip" "Phillip")}}
;; --- /printed to repl ---

;; When a flow throws an exception ...
;;
;; `run` returns the exception as a value
(run
  (flow "fails"
    (match? 2 1)
    (state-flow/wrap-fn #(throw (ex-info "boom!" {})))
    (flow "is never run"
      (match? 4 3)))
  {})

;; `run*` raises the exception by default
(state-flow.core/run*
  {:init (constantly {})}
  (flow "fails"
    (match? 2 1)
    (state-flow/wrap-fn #(throw (ex-info "boom!" {})))
    (flow "is never run"
      (match? 4 3))))

;; ------------------------------------------------
;; clojure.test integration: defflow
;; ------------------------------------------------

(require '[state-flow.cljtest :refer [defflow]])

;; defflow produces a function, like clojure.test's deftest, which
;; can be invoked directly, or through clojure.test's run functions
(defflow store-and-retrieve-users {:init (constantly {:db (atom {:users #{}})})}
  (register-user-helper {:name "Phillip"})
  (flow "user got added"
    (match? #{{:name "Philip"}}
            (fetch-users-helper))))

(meta #'store-and-retrieve-users)
;; => {:test #function[user/fn--16196],
;;     :line 324,
;;     :column 1,
;;     :file "/Users/david/work/nubank/state-flow/doc/walkthrough.repl",
;;     :name store-and-retrieve-users,
;;     :ns #namespace[user]}

(clojure.test/test-var #'store-and-retrieve-users)

;; Common practice is to include a project-specific version of
;; defflow, which wraps defflow and passes it a common :init,
;; e.g.

(defmacro custom-defflow [name & flows]
  `(defflow ~name {:init (constantly {:db (atom {:users #{}})})
                   :runner run}
     ~@flows))

(custom-defflow store-and-retrieve-users-again
 (register-user-helper {:name "Phillip"})
 (flow "user got added"
   (match? #{{:name "Philip"}}
           (fetch-users-helper))))

  (meta #'store-and-retrieve-users-again)

(clojure.test/test-var #'store-and-retrieve-users-again)
